@page "/home"
@namespace BlazorBabylonJs.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BlazorBabylonJs</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />

    <!-- Babylon.js -->
    <script src="https://code.jquery.com/pep/0.4.2/pep.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>
    <script src="https://preview.babylonjs.com/ammo.js"></script>
    <script src="https://preview.babylonjs.com/cannon.js"></script>
    <script src="https://preview.babylonjs.com/Oimo.js"></script>
    <script src="https://preview.babylonjs.com/libktx.js"></script>
    <script src="https://preview.babylonjs.com/earcut.min.js"></script>
    <script src="https://preview.babylonjs.com/babylon.js"></script>
    <script src="https://preview.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>
    <script src="https://preview.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
    <script src="https://preview.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
    <script src="https://preview.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
    <script src="https://preview.babylonjs.com/loaders/babylonjs.loaders.js"></script>
    <script src="https://preview.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
    <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>

    <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>
    
    <script>
        var engine;
        var scene;
        var idleAnim;
        var walkAnim;
        var runAnim;
        window.BlazorFunctions = {        
            showUI: function () {
                engine.displayLoadingUI();
            },
            hideUI: function () {
                engine.hideLoadingUI();
            },
            idleBabylon: function () {
                idleAnim._slider.value = 1.0;
                walkAnim._slider.value = 0.0;
                runAnim._slider.value = 0.0;
                // Synchronize animations
                idleAnim.syncWith(null);
                walkAnim.syncWith(idleAnim);                
            },
            walkBabylon: function () {
                idleAnim._slider.value = 0.0;
                walkAnim._slider.value = 1.0;
                runAnim._slider.value = 0.0;
                // Synchronize animations
                walkAnim.syncWith(null);
                idleAnim.syncWith(walkAnim);
            },
            runBabylon: function () {
                walkAnim._slider.value = 0.0;
                idleAnim._slider.value = 0.0;
                runAnim._slider.value = 1.0;
                // Synchronize animations
                walkAnim.syncWith(runAnim);              
            },
            showBabylon: function (canvas) {
                var scene = null;
                var sceneToRender = null;
                var createDefaultEngine = function () { return new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true }); };
                var delayCreateScene = function () {

                    // Model by Mixamo

                    engine.enableOfflineSupport = false;
                    BABYLON.Animation.AllowMatricesInterpolation = true;
                    scene = new BABYLON.Scene(engine);

                    var camera = new BABYLON.ArcRotateCamera("camera1", Math.PI / 2, Math.PI / 4, 3, new BABYLON.Vector3(0, 1, 0), scene);
                    camera.attachControl(canvas, true);

                    camera.lowerRadiusLimit = 2;
                    camera.upperRadiusLimit = 10;
                    camera.wheelDeltaPercentage = 0.01;

                    var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
                    light.intensity = 0.6;
                    light.specular = BABYLON.Color3.Black();

                    var light2 = new BABYLON.DirectionalLight("dir01", new BABYLON.Vector3(0, -0.5, -1.0), scene);
                    light2.position = new BABYLON.Vector3(0, 5, 5);

                    // Shadows
                    var shadowGenerator = new BABYLON.ShadowGenerator(1024, light2);
                    shadowGenerator.useBlurExponentialShadowMap = true;
                    shadowGenerator.blurKernel = 32;

                    engine.displayLoadingUI();

                    BABYLON.SceneLoader.ImportMesh("", "./scenes/", "dummy3.babylon.json", scene, function (newMeshes, particleSystems, skeletons) {
                        var skeleton = skeletons[0];

                        shadowGenerator.addShadowCaster(scene.meshes[0], true);
                        for (var index = 0; index < newMeshes.length; index++) {
                            newMeshes[index].receiveShadows = false;;
                        }

                        var helper = scene.createDefaultEnvironment({
                            enableGroundShadow: true
                        });
                        helper.setMainColor(BABYLON.Color3.Gray());
                        helper.ground.position.y += 0.01;

                        var idleRange = skeleton.getAnimationRange("YBot_Idle");
                        var walkRange = skeleton.getAnimationRange("YBot_Walk");
                        var runRange = skeleton.getAnimationRange("YBot_Run");
                        idleAnim = scene.beginWeightedAnimation(skeleton, idleRange.from, idleRange.to, 1.0, true);
                        walkAnim = scene.beginWeightedAnimation(skeleton, walkRange.from, walkRange.to, 0, true);
                        runAnim = scene.beginWeightedAnimation(skeleton, runRange.from, runRange.to, 0, true);
                                                
                        var params = [
                            { name: "Idle", anim: idleAnim },
                            { name: "Walk", anim: walkAnim },
                            { name: "Run", anim: runAnim }
                        ]

                        params.forEach((param) => {
                            var slider = new BABYLON.GUI.Slider();
                            slider.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
                            slider.minimum = 0;
                            slider.maximum = 1;
                            slider.color = "green";
                            slider.value = param.anim.weight;
                            slider.height = "20px";
                            slider.width = "205px";
                            slider.onValueChangedObservable.add((v) => {
                                param.anim.weight = v;
                            })
                            param.anim._slider = slider;
                        });                

                        engine.hideLoadingUI();

                    }, function (evt) {
                    });

                    return scene;

                };

                engine = createDefaultEngine();
                if (!engine) throw 'engine should not be null.';
                scene = delayCreateScene();;
                sceneToRender = scene

                engine.runRenderLoop(function () {
                    if (sceneToRender) {
                        sceneToRender.render();
                    }
                });

                // Watch for browser/canvas resize events
                window.addEventListener("resize", function () {
                    engine.resize();
                });
            }
        };
    </script>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>
